[
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/server.js::0",
    "text": "const http = require('http');\nconst app = require('./app')\n\nconst port = process.env.PORT || 3000;\nconst server = http.createServer(app);\nserver.listen(port);",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/server.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/jwtMiddleware.js::7",
    "text": "const authenticateJWT = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader) {\n        if (req.header('X-AUTH-SECRET-KEY') === partnerKey) {\n            //const token = authHeader;\n            const token = authHeader.split(' ')[1];\n\n            jwt.verify(token, accessTokenSecret, (err, user) => {\n                if (err) {\n                    if (err.name === 'TokenExpiredError') {\n                        return res.status(403).json({ message: 'Token expired!' });\n                    } else {\n                        return res.status(403).json({ message: 'Token invalid!' });\n                    }",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/jwtMiddleware.js",
      "start_line": 7,
      "type": "function"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/jwtMiddleware.js::34",
    "text": "const publicAuthenticateJWT = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n    if (authHeader) {\n        //const token = authHeader;\n        const token = authHeader.split(' ')[1];\n        jwt.verify(token, accessTokenSecret, (err, user) => {\n            if (err) {\n                const err = new Error('Token expired!');\n                err.status = 403;\n                throw err;\n            }",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/jwtMiddleware.js",
      "start_line": 34,
      "type": "function"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/app.js::0",
    "text": "const express = require(\"express\");\nconst app = express();\nconst morgan = require(\"morgan\");\nconst cors = require(\"cors\");\nconst swaggerUi = require(\"swagger-ui-express\");\nconst fs = require(\"fs\");\nconst http = require(\"http\");\n\nconst {swaggerUserDocument,swaggerTrnxDocument,} = require(\"./swagger/swagger.js\");\n\nconst errorLogStream = fs.createWriteStream(\"./logs/runtime.log\", {\n  flags: \"a\",\n});\n\nlet lastConsoleError = \"\"; // Buffer to store latest error before request logs\n\nconst originalConsoleError = console.error;\nconsole.error = function (...args) {\n  const logText =\n    args\n      .map((arg) =>\n        typeof arg === \"string\" ? arg : JSON.stringify(arg, null, 2)\n      )\n      .join(\" \") + \"\\n\";\n\n  lastConsoleError += logText; // Capture for request-based logging\n\n  originalConsoleError.apply(console, args); // Still show in console\n};\n\n//Middleware configurations\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(cors({ origin: \"*\" }));\napp.use(morgan(\"dev\"));\n\n//Capture 4xx/5xx request logs BEFORE response is sent\napp.use((req, res, next) => {\n  const originalSend = res.send;\n  const originalStatus = res.status;\n\n  let statusCode = 200;\n\n  res.status = function (code) {\n    statusCode = code;\n    return originalStatus.apply(this, arguments);\n  };\n\n  res.send = function (body) {\n    if (statusCode >= 400 && statusCode < 600) {\n      const now = new Date().toISOString();\n      const logLine = `${req.ip} - - [${now}] \"${req.method} ${req.originalUrl} HTTP/${req.httpVersion}\" ${statusCode}\\n`;\n      const stack = res.locals.errorDetails || lastConsoleError;\n      const fullLog = `${logLine}${stack ? `Error Stack:\\n${stack}\\n` : \"\"}`;\n\n      // Write locally\n      /*errorLogStream.write(fullLog);\n      // Clear buffer\n      lastConsoleError = \"\";*/ \n\n      //Send to MCP server\n      const postReq = http.request(\n        {\n          hostname: \"localhost\",\n          port: 8000,\n          path: \"/logs/stream\",\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"text/plain\",\n            \"Content-Length\": Buffer.byteLength(fullLog),\n          },\n        },\n        (res) => {\n          res.on(\"data\", () => {});\n        }\n      );\n\n      postReq.on(\"error\", (err) => {\n        console.warn(\"⚠️ Failed to send log to MCP:\", err.message);\n      });\n\n      postReq.write(fullLog);\n      postReq.end();\n    }\n\n    return originalSend.apply(this, arguments);\n  };\n\n  next();\n});\n\n//Also pipe structured request logs via morgan (optional)\napp.use(\n  morgan(\"combined\", {\n    stream: {\n      write: (message) => {\n        // Only log to runtime.log if it’s 4xx or 5xx\n        const statusCodeMatch = message.match(/\" (\\d{3}) /);\n        if (statusCodeMatch) {\n          const status = parseInt(statusCodeMatch[1]);\n          if (status >= 400 && status < 600) {\n            // Suppressed because we're already logging manually above\n            return;\n          }\n        }\n      },\n    },\n  })\n);\n\n//Swagger\napp.use(\n  \"/api-docs/user\",\n  swaggerUi.serveFiles(swaggerUserDocument),\n  swaggerUi.setup(swaggerUserDocument)\n);\napp.use(\n  \"/api-docs/transaction\",\n  swaggerUi.serveFiles(swaggerTrnxDocument),\n  swaggerUi.setup(swaggerTrnxDocument)\n);\n\n//Routes\nconst userRoutes = require(\"./routes/user.route.js\");\nconst transactionRoutes = require(\"./routes/transaction.route.js\");\nconst defaultRoutes = require(\"./routes/default.route.js\");\n\napp.use(\"/\", userRoutes);\napp.use(\"/\", transactionRoutes);\napp.use(\"/\", defaultRoutes);\n\n//404 Not Found\napp.use((req, res, next) => {\n  const err = new Error(`${req.method} ${req.url} Not Found`);\n  err.status = 404;\n  next(err);\n});\n\n//Global Error Handler\napp.use((err, req, res, next) => {\n  const errorDetails = err.stack || err.message || \"Unknown Error\";\n  res.locals.errorDetails = errorDetails;\n  console.error(errorDetails); // Already logs to file\n  res.status(err.status || 500).json({ error: { message: err.message } });\n});\n\nmodule.exports = app;",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/app.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/services/getBalance.js::7",
    "text": "async function getBalance(account) {\n    var userBalance = await sequelize.query(\"SELECT COALESCE(SUM(t.`credit`)-SUM(t.`debit`), 0) AS Balance FROM Transactions t WHERE t.`account`='\" + account + \"'\", { model: Transactions })\n    return parseFloat(parseFloat(userBalance[0].dataValues.Balance).toFixed(2));\n}",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/services/getBalance.js",
      "start_line": 7,
      "type": "function"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/db.js::0",
    "text": "const { Sequelize } = require('sequelize');\n//require('custom-env').env()\nrequire('custom-env').env('dev')\n\nconst db_name = process.env.DB_NAME;\nconst db_user = process.env.DB_USER;\nconst host = process.env.DB_HOST;\nconst port=process.env.DB_PORT || 3306;\nconst password = process.env.DB_PASSWORD;\n\nconst sequelize = new Sequelize(db_name, db_user, password, {\n    host: host,\n    port: port,\n    dialect: 'mysql',\n    logging: true\n});\n\nmodule.exports = { sequelize }",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/db.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Users.js::0",
    "text": "const { Sequelize, DataTypes, Op } = require('sequelize');\nconst { sequelize } = require('./db');\n\nconst Users = sequelize.define('Users', {\n    name: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true\n    },\n    password: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    phone_number: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    nid: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    role: {\n        type: DataTypes.STRING,\n        allowNull: true\n    },\n    photo: {\n        type: DataTypes.STRING,\n        allowNull: true\n    }\n});\n\nconst predefinedUsers = [\n    {\n        name: \"SYSTEM\",\n        email: \"system@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"SYSTEM\",\n        nid: \"123456789\",\n        role: \"Agent\",\n        photo: null\n    },\n    {\n        name: \"Admin\",\n        email: \"admin@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"01686606909\",\n        nid: \"123456789\",\n        role: \"Admin\",\n        photo: null\n    },\n    {\n        name: \"Test Agent\",\n        email: \"agent@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"01686606901\",\n        nid: \"123456789\",\n        role: \"Agent\",\n        photo: null\n    },\n    {\n        name: \"Test Customer 1\",\n        email: \"customer1@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"01686606902\",\n        nid: \"123456789\",\n        role: \"Customer\",\n        photo: null\n    },\n    {\n        name: \"Test Customer 2\",\n        email: \"customer2@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"01686606903\",\n        nid: \"123456789\",\n        role: \"Customer\",\n        photo: null\n    },\n    {\n        name: \"Test Merchant\",\n        email: \"merchant@roadtocareer.net\",\n        password: \"1234\",\n        phone_number: \"01686606905\",\n        nid: \"123456789\",\n        role: \"Merchant\",\n        photo: null\n    }\n];\n\n// Sync database and conditionally insert predefined data\nsequelize.sync().then(async () => {\n    for (const user of predefinedUsers) {\n        const existingUser = await Users.findOne({\n            where: {\n                [Op.or]: [\n                    { email: user.email },\n                    { phone_number: user.phone_number }\n                ]\n            }\n        });\n\n        if (!existingUser) {\n            await Users.create(user);\n            console.log(`User ${user.email} has been inserted.`);\n        } else {\n            console.log(`User ${user.email} already exists and was not inserted.`);\n        }\n    }\n});\n\nmodule.exports = { Users };",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Users.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Transactions.js::0",
    "text": "const { Sequelize, DataTypes, Op } = require('sequelize');\nconst { sequelize } = require('./db');\n\n// Define the Transactions model\nconst Transactions = sequelize.define('Transactions', {\n    account: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    from_account: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    to_account: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    description: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    trnxId: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: false\n    },\n    debit: {\n        type: DataTypes.INTEGER,\n        allowNull: false\n    },\n    credit: {\n        type: DataTypes.DOUBLE,\n        allowNull: false\n    }\n});\n\n// Seed data to be inserted if not found\nconst seedTransaction = {\n    account: \"SYSTEM\",\n    from_account: \"SUPER_USER\",\n    to_account: \"SYSTEM\",\n    description: \"SYSTEM DEPOSIT\",\n    trnxId: \"TRNX1001\",\n    debit: 0,\n    credit: 10000000\n};\n\n// Sync database and conditionally insert seed data\nsequelize.sync().then(async () => {\n    // Check if the transaction with the specific trnxId exists\n    const existingTransaction = await Transactions.findOne({\n        where: {\n            trnxId: seedTransaction.trnxId\n        }\n    });\n\n    // If not found, insert the seed transaction\n    if (!existingTransaction) {\n        await Transactions.create(seedTransaction);\n        console.log('Seed SYSTEM account has been inserted.');\n    } else {\n        console.log('Seed SYSTEM account already exists and was not inserted.');\n    }\n});\n\nmodule.exports = { Transactions };",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Transactions.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Role.js::0",
    "text": "const { Sequelize, DataTypes } = require('sequelize');\nconst { sequelize } = require('./db');\n\nsequelize.sync();\n\nexports.Roles = sequelize.define('Roles', {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    role: {\n        type: DataTypes.STRING(20),\n        allowNull: false\n    }\n    \n});",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/sequelizeModel/Role.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/user.route.js::0",
    "text": "const express = require('express');\nconst { authenticateJWT, publicAuthenticateJWT } = require('../jwtMiddleware');\nconst userController = require('../controllers/users/user.controller.js');\n\nconst router = express.Router();\n\nrouter.get('/user/list', publicAuthenticateJWT, userController.listUsers);\nrouter.get('/user/search/id/:id', publicAuthenticateJWT, userController.searchUserById);\nrouter.get('/user/search/phonenumber/:phone_number', publicAuthenticateJWT, userController.searchUserByPhoneNumber);\nrouter.post('/user/search/email', publicAuthenticateJWT, userController.searchUserByEmail);\nrouter.get('/user/search/:role', authenticateJWT, userController.searchUsersByRole);\nrouter.post('/user/create', authenticateJWT, userController.createUser);\nrouter.put('/user/update/:id', authenticateJWT, userController.updateUser);\nrouter.patch('/user/update/:id', authenticateJWT, userController.partialUpdateUser);\nrouter.delete('/user/delete/:id', authenticateJWT, userController.deleteUser);\nrouter.post('/user/login', userController.validateLoginData, userController.loginUser);\nrouter.post('/user/upload/:id', userController.upload, userController.uploadPhoto);\nrouter.get('/user/uploads/:file', userController.retrieveImage);\n\nmodule.exports = router;",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/user.route.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/transaction.route.js::0",
    "text": "const express = require('express');\nconst { authenticateJWT } = require('../jwtMiddleware');\nconst depositController = require('../controllers/transactions/deposit.controller.js');\nconst withdrawController = require('../controllers/transactions/withdraw.controller.js');\nconst transactionDetailsController = require('../controllers/transactions/transactionDetails.controller.js');\nconst sendMoneyController = require('../controllers/transactions/sendMoney.controller.js');\nconst paymentController = require('../controllers/transactions/payment.controller.js');\n\nconst router = express.Router();\n\nrouter.get('/transaction/list', authenticateJWT, transactionDetailsController.listTransactions);\nrouter.get('/transaction/search/:trnxId', authenticateJWT, transactionDetailsController.searchTransactionById);\nrouter.get('/transaction/statement/:account', authenticateJWT, transactionDetailsController.getStatementByAccount);\nrouter.get('/transaction/limit/:account', authenticateJWT, transactionDetailsController.getTransactionLimitByAccount);\nrouter.get('/transaction/balance/:account', authenticateJWT, transactionDetailsController.getBalanceByAccount);\n\nrouter.post('/transaction/deposit', authenticateJWT, depositController.handleDeposit);\nrouter.post('/transaction/withdraw', authenticateJWT, withdrawController.handleWithdraw);\nrouter.post('/transaction/sendmoney', authenticateJWT, sendMoneyController.handleSendMoney);\nrouter.post('/transaction/payment', authenticateJWT, paymentController.handlePayment);\n\nmodule.exports = router;",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/transaction.route.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/default.route.js::0",
    "text": "const express = require('express');\nconst router = express.Router();\nconst defaultController= require('../controllers/default/default.controller.js')\n\nrouter.get('/', defaultController.serverStatus);\nmodule.exports = router;",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/routes/default.route.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/users/user.controller.js::0",
    "text": "const { Users } = require('../../sequelizeModel/Users.js');\nconst { Roles } = require('../../sequelizeModel/Role.js');\nconst { Transactions } = require('../../sequelizeModel/Transactions.js');\nconst jwt = require('jsonwebtoken');\nconst Joi = require('joi');\nconst multer = require('multer');\nconst fs = require('fs');\nconst path = require('path');\n\n\n\n// List all users with balance\nexports.listUsers = async (req, res) => {\n    try {\n        // Parse limit and offset from the request query. Set default values if not provided.\n        const limit = req.query.limit ? parseInt(req.query.limit, 10) : 10;  // Default to 10 if limit is not specified\n        const offset = req.query.offset ? parseInt(req.query.offset, 10) : 0;  // Default to 0 if offset is not specified\n\n        const users = await Users.findAll({\n            limit: limit,\n            offset: offset\n        });\n\n        const userList = await Promise.all(users.map(async (user) => {\n            // Assuming `Transactions` model has `credit` and `debit` fields\n            const userTransactions = await Transactions.findAll({\n                where: { account: user.phone_number }\n            });\n            const balance = userTransactions.reduce((acc, transaction) => acc + transaction.credit - transaction.debit, 0);\n            return { ...user.dataValues, balance: balance };\n        }));\n\n        res.status(200).json({ message: \"User list\", count: userList.length, users: userList });\n    } catch (error) {\n        console.error(\"Error listing users:\", error);\n        res.status(500).json({ message: \"Error listing users\" });\n    }\n};\n\n\n// Search user by ID\nexports.searchUserById = async (req, res) => {\n    try {\n        const user = await Users.findOne({ where: { id: req.params.id } });\n        if (user) {\n            const userBalance = await Transactions.findAll({ where: { account: user.phone_number } });\n            res.status(200).json({ message: \"User found\", user: { ...user.dataValues, balance: userBalance.reduce((acc, cur) => acc + cur.credit - cur.debit, 0) } });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (error) {\n        console.error(\"Error searching user by ID:\", error);\n        res.status(500).json({ message: \"Error searching user\" });\n    }\n};\n\n// Search user by phone number\nexports.searchUserByPhoneNumber = async (req, res) => {\n    try {\n        const user = await Users.findOne({ where: { phone_number: req.params.phone_number } });\n        if (user) {\n            const userBalance = await Transactions.findAll({ where: { account: user.phone_number } });\n            res.status(200).json({ message: \"User found\", user: { ...user.dataValues, balance: userBalance.reduce((acc, cur) => acc + cur.credit - cur.debit, 0) } });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (error) {\n        console.error(\"Error searching user by phone number:\", error);\n        res.status(500).json({ message: \"Error searching user\" });\n    }\n};\n\n// Search user by email\nexports.searchUserByEmail = async (req, res) => {\n    try {\n        const { email } = req.body;\n        const user = await Users.findOne({ where: { email } });\n        if (user) {\n            const userBalance = await Transactions.findAll({ where: { account: user.phone_number } });\n            res.status(200).json({ message: \"User found\", user: { ...user.dataValues, balance: userBalance.reduce((acc, cur) => acc + cur.credit - cur.debit, 0) } });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (error) {\n        console.error(\"Error searching user by email:\", error);\n        res.status(500).json({ message: \"Error searching user\" });\n    }\n};\n\n// Search users by role\nexports.searchUsersByRole = async (req, res) => {\n    try {\n        const users = await Users.findAll({ where: { role: req.params.role } });\n        const userList = await Promise.all(users.map(async (user) => {\n            const userBalance = await Transactions.findAll({ where: { account: user.phone_number } });\n            return { ...user.dataValues, balance: userBalance.reduce((acc, cur) => acc + cur.credit - cur.debit, 0) };\n        }));\n        res.status(200).json({ count: users.length, users: userList });\n    } catch (error) {\n        console.error(\"Error searching users by role:\", error);\n        res.status(500).json({ message: \"Error searching users\" });\n    }\n};\n\n// Create a new user\nexports.createUser = async (req, res) => {\n    if (req.user.role.toLowerCase() !== 'admin') {\n        return res.status(403).json({ message: 'Only admin can create new users' });\n    }\n\n    try {\n        const { email, phone_number, role } = req.body;\n\n        // Check if the provided role exists in the Role table\n        const roleExists = await Roles.findOne({ where: { role } });\n        if (!roleExists) {\n            return res.status(400).json({ message: `Invalid role: ${role}. This role does not exist in the Role table.` });\n        }\n\n        // Check if the email or phone number already exists\n        const emailExists = await Users.findOne({ where: { email } });\n        const phoneNumberExists = await Users.findOne({ where: { phone_number } });\n\n        if (emailExists || phoneNumberExists) {\n            return res.status(208).json({ message: \"User already exists\" });\n        }\n\n        // Create the new user if the role is valid and the user doesn't exist\n        const newUser = { ...req.body };\n\n        // Validate the new user data\n        const { error } = await exports.validateUser(newUser);\n        if (error) {\n            console.error(\"Validation error:\", error.details[0].message);\n            return res.status(400).json({ message: error.details[0].message });\n        }\n\n        // Create the user in the database\n        const user = await Users.create(newUser);\n        res.status(201).json({ message: \"User created\", user });\n\n    } catch (err) {\n        console.error(\"Error creating user:\", err);\n        console.error(\"Error details:\", err.message);\n        res.status(500).json({ message: \"Error creating user\", error: err.message });\n    }\n};\n\n// Update an existing user\nexports.updateUser = async (req, res) => {\n    if (req.user.role.toLowerCase() !== 'admin') {\n        return res.status(403).json({ message: 'Only admin can update users' });\n    }\n\n    try {\n        const { id } = req.params;\n        const user = await Users.findOne({ where: { id } });\n\n        if (user) {\n            const updatedUser = { ...req.body };\n\n            const { error } = await exports.validateUser(updatedUser);\n            if (error) {\n                return res.status(400).json({ message: error.details[0].message });\n            }\n\n            await Users.update(updatedUser, { where: { id } });\n            res.status(200).json({ message: \"User updated\", user: updatedUser });\n\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (err) {\n        console.error(\"Error updating user:\", err);\n        res.status(500).json({ message: \"Error updating user\" });\n    }\n};\n\n// Partially update an existing user\nexports.partialUpdateUser = async (req, res) => {\n    if (req.user.role.toLowerCase() !== 'admin') {\n        return res.status(403).json({ message: 'Only admin can update users' });\n    }\n\n    try {\n        const { id } = req.params;\n        const user = await Users.findOne({ where: { id } });\n\n        if (user) {\n            const updatedUser = { ...req.body };\n            await Users.update(updatedUser, { where: { id } });\n            res.status(200).json({ message: \"User updated successfully\", user: updatedUser });\n\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (err) {\n        console.error(\"Error updating user:\", err);\n        res.status(500).json({ message: \"Error updating user\" });\n    }\n};\n\n// Delete a user\nexports.deleteUser = async (req, res) => {\n    if (req.user.role.toLowerCase() !== 'admin') {\n        return res.status(403).json({ message: 'Only admin can delete users' });\n    }\n\n    try {\n        const { id } = req.params;\n        const user = await Users.findOne({ where: { id } });\n\n        if (user) {\n            if (user.phone_number === \"SYSTEM\" || user.email == \"admin@roadtocareer.net\") {\n                res.status(403).json({ message: \"Cannot delete SYSTEM user or admin\" });\n            } else {\n                await Users.destroy({ where: { id } });\n                res.status(200).json({ message: \"User deleted successfully\" });\n            }\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (err) {\n        console.error(\"Error deleting user:\", err);\n        res.status(500).json({ message: \"Error deleting user\" });\n    }\n};\n\nexports.loginUser = async (req, res) => {\n    try {\n        const { email, password } = req.validatedData;\n\n        const user = await Users.findOne({ where: { email } });\n\n        if (!user) {\n            return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (user.password !== password) {\n            return res.status(401).json({ message: \"Password incorrect\" });\n        }\n\n        const token = jwt.sign(\n            { identifier: email, role: user.role },\n            process.env.accessTokenSecret,\n            { expiresIn: process.env.expires_in }\n        );\n\n        res.status(200).json({\n            message: \"Login successful\",\n            token: token,\n            role: user.role,\n            expiresIn: process.env.expires_in\n        });\n    } catch (error) {\n        console.error(\"Error during login:\", error);\n        res.status(500).json({ message: \"An error occurred while processing the request: \" + error.message });\n    }\n};\n\nexports.validateLoginData = (req, res, next) => {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n        return res.status(400).json({ message: \"Please check the request body and try again\" });\n    }\n\n    req.validatedData = { email, password };\n    next();\n};\n\n// Multer configuration for image upload\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        cb(null, './uploads'); // Specify your image storage destination\n    },\n    filename: function (req, file, cb) {\n        cb(null, file.originalname); // Use the original file name\n    }\n});\n\nconst upload = multer({\n    storage: storage,\n    limits: { fileSize: 1024 * 1024 }, // Maximum file size of 1MB\n    fileFilter: (req, file, cb) => {\n        if (file.mimetype.startsWith('image/')) {\n            cb(null, true); // Accept only image files\n        } else {\n            cb(new Error('Please upload an image file'));\n        }\n    }\n});\n\nexports.upload = upload.single('image');\n\nexports.uploadPhoto = async (req, res) => {\n    try {\n        const { id } = req.params;\n        const user = await Users.findOne({ where: { id } });\n\n        if (!user) {\n            return res.status(404).json({ message: 'User not found' });\n        }\n\n        const image = req.file;\n        if (!image) {\n            return res.status(400).json({ message: 'No file uploaded' });\n        }\n\n        await Users.update({ photo: image.filename }, { where: { id } });\n\n        res.status(200).json({ message: 'Photo uploaded successfully', photo: image.filename });\n    } catch (err) {\n        console.error(\"Error uploading photo:\", err);\n        res.status(500).json({ message: 'Error uploading photo', error: err.message });\n    }\n};\n\nexports.retrieveImage = (req, res) => {\n    const { file } = req.params; // Extract the file name from the URL\n    const uploadsDir = path.join(__dirname, '../../uploads'); // Path to the uploads folder\n    const filePath = path.join(uploadsDir, file); // Construct the full file path\n    console.log(filePath);\n  \n    // Check if the file exists\n    fs.access(filePath, fs.constants.F_OK, (err) => {\n      if (err) {\n        console.error(`File not found: ${filePath}`);\n        return res.status(404).json({\n          error: 'File not found',\n        });\n      }\n  \n      // Send the file\n      res.sendFile(filePath, (err) => {\n        if (err) {\n          console.error(`Error sending file: ${err.message}`);\n          return res.status(500).json({\n            error: 'Failed to send file',\n          });\n        }\n      });\n    });\n};\n\n// Validation function for user creation and updates\nexports.validateUser = async (user) => {\n    const schema = Joi.object({\n        name: Joi.string().min(3).max(50).required(),\n        email: Joi.string().min(5).max(255).required().email(),\n        password: Joi.string().min(4).max(1024).required(),\n        phone_number: Joi.string().min(11).max(11).required(),\n        nid: Joi.string().min(7).max(13).required(),\n        role: Joi.string().min(3).max(50).required()\n    });\n    return schema.validate(user);\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/users/user.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/withdraw.controller.js::0",
    "text": "const { json } = require('body-parser');\nconst { Transactions } = require('../../sequelizeModel/Transactions');\nconst { Users } = require('../../sequelizeModel/Users');\nconst { getBalance } = require('../../services/getBalance');\nconst jsonConfig=require('./config.json');\n\nexports.handleWithdraw = async (req, res, next) => {\n    const { from_account, to_account, amount } = req.body;\n    var trnxId = \"TXN\" + Math.floor(Math.random() * 1000000);\n\n    const from_account_exists = await Users.findOne({ where: { phone_number: from_account } });\n    const to_account_exists = await Users.findOne({ where: { phone_number: to_account } });\n\n    if (from_account_exists && to_account_exists) {\n        if (from_account === to_account) {\n            return res.status(208).json({ message: \"From account and to account cannot be the same\" });\n        }\n\n        const from_account_role = await Users.findOne({ where: { phone_number: from_account } });\n        const to_account_role = await Users.findOne({ where: { phone_number: to_account } });\n\n        var feeRate = jsonConfig.withdraw.serviceFee;\n        var commissionRate = jsonConfig.withdraw.agentComission;\n        var withdrawFee = feeRate * amount;\n        var commission = commissionRate * amount;\n        var minAmount = jsonConfig.withdraw.minAmount;\n\n        if (withdrawFee <= 5) {\n            withdrawFee = 5;\n        } else {\n            withdrawFee = feeRate * amount;\n        }\n\n        if (from_account_role.getDataValue('role') === \"Customer\" && to_account_role.getDataValue('role') === \"Agent\") {\n            var currentBalance = await getBalance(from_account);\n\n            if (currentBalance > 0 && amount + withdrawFee <= currentBalance) {\n                if (amount >= minAmount) {\n                    const debitTrnx = {\n                        account: from_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Withdraw\",\n                        trnxId: trnxId,\n                        debit: amount + withdrawFee,\n                        credit: 0\n                    };\n                    const creditTrnx = {\n                        account: to_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Withdraw\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: amount + commission\n                    };\n                    const creditTrnxToSystem = {\n                        account: \"SYSTEM\",\n                        from_account: from_account,\n                        to_account: \"SYSTEM\",\n                        description: \"Withdraw Service Charge\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: withdrawFee\n                    };\n                    await Transactions.create(debitTrnx);\n                    await Transactions.create(creditTrnx);\n                    await Transactions.create(creditTrnxToSystem);\n\n                    return res.status(201).json({\n                        message: \"Withdraw successful\",\n                        trnxId: trnxId,\n                        fee: withdrawFee,\n                        currentBalance: await getBalance(from_account),\n                    });\n                } else {\n                    return res.status(208).json({ \n                        message: `Minimum withdraw amount is ${minAmount} tk` ,\n                        currentBalance: await getBalance(from_account)\n                    });\n                }\n            } else {\n                return res.status(208).json({ message: \"Insufficient balance\", currentBalance: await getBalance(from_account) });\n            }\n        } else {\n            return res.status(208).json({ message: \"Customer cannot withdraw money from another customer\" });\n        }\n    } else {\n        if(!from_account_exists){\n            return res.status(404).json({ message: \"From Account does not exist\" });\n        }\n        else if(!to_account_exists){\n            return res.status(404).json({ message: \"To Account does not exist\" });\n        }\n        \n    }\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/withdraw.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/transactionDetails.controller.js::0",
    "text": "const { Transactions } = require('../../sequelizeModel/Transactions');\nconst { Users } = require('../../sequelizeModel/Users');\nconst { getBalance } = require('../../services/getBalance');\n\n// Server status check\nexports.serverStatus = (req, res, next) => {\n    res.status(200).json({\n        message: \"Server is up\"\n    });\n};\n\n// List all transactions\nexports.listTransactions = async (req, res, next) => {\n    try {\n        // Parse limit and offset from request query. Provide default values if not specified.\n        const limit = req.query.limit ? parseInt(req.query.limit, 10) : 10;  // Default limit is 10 if not provided\n        const offset = req.query.offset ? parseInt(req.query.offset, 10) : 0;  // Default offset is 0 if not provided\n\n        const transactions = await Transactions.findAll({\n            limit: limit,\n            offset: offset,\n            order: [['createdAt', 'DESC']],  // Replace 'createdAt' with the column you want to sort by\n        });\n\n        if (transactions.length > 0) {\n            res.status(200).json({\n                message: \"Transaction list\",\n                count: transactions.length,\n                transactions: transactions\n            });\n        } else {\n            res.status(404).json({ message: \"No transactions found\" });\n        }\n    } catch (e) {\n        console.log(e);\n        res.status(500).json({ message: \"Error fetching transactions\" });\n    }\n};\n\n\n\n// Search transactions by ID\nexports.searchTransactionById = async (req, res, next) => {\n    try {\n        const transactions = await Transactions.findAll({ where: { trnxId: req.params.trnxId } });\n        if (transactions.length > 0) {\n            res.status(200).json({\n                message: \"Transaction list\",\n                count: transactions.length,\n                transactions: transactions\n            });\n        } else {\n            res.status(404).json({ message: \"Transaction not found\" });\n        }\n    } catch (e) {\n        console.log(e);\n        res.status(500).json({ message: \"Error searching transactions\" });\n    }\n};\n\n// Get statement by account number\nexports.getStatementByAccount = async (req, res, next) => {\n    try {\n        const user = await Users.findOne({ where: { phone_number: req.params.account } });\n        if (user) {\n            const transactions = await Transactions.findAll({ where: { account: req.params.account } });\n            res.status(200).json({\n                message: \"Transaction list\",\n                count: transactions.length,\n                transactions: transactions\n            });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (e) {\n        console.log(e);\n        res.status(500).json({ message: \"Error fetching statement\" });\n    }\n};\n\n// Get transaction limit by account number\nexports.getTransactionLimitByAccount = async (req, res, next) => {\n    try {\n        const user = await Users.findOne({ where: { phone_number: req.params.account } });\n        if (user) {\n            const total_credit = await Transactions.sum('credit', { where: { account: req.params.account, description: \"Deposit\" } });\n            const total_debit = await Transactions.sum('debit', { where: { account: req.params.account, description: \"Withdraw\" } });\n            const limit_diff = total_credit - total_debit;\n\n            res.status(200).json({\n                message: \"User limit\",\n                limit: 10000 - limit_diff\n            });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (e) {\n        console.log(e);\n        res.status(500).json({ message: \"Error fetching transaction limit\" });\n    }\n};\n\n// Get balance by account number\nexports.getBalanceByAccount = async (req, res, next) => {\n    try {\n        const user = await Users.findOne({ where: { phone_number: req.params.account } });\n        if (user) {\n            const userBalance = await getBalance(req.params.account);\n            res.status(200).json({\n                message: \"User balance\",\n                balance: userBalance\n            });\n        } else {\n            res.status(404).json({ message: \"User not found\" });\n        }\n    } catch (e) {\n        console.log(e);\n        res.status(500).json({ message: \"Error fetching balance\" });\n    }\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/transactionDetails.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/sendMoney.controller.js::0",
    "text": "const { Transactions } = require('../../sequelizeModel/Transactions');\nconst { Users } = require('../../sequelizeModel/Users');\nconst { getBalance } = require('../../services/getBalance');\nconst jsonConfig=require('./config.json');\n\nexports.handleSendMoney = async (req, res, next) => {\n    const { from_account, to_account, amount } = req.body;\n    var trnxId = \"TXN\" + Math.floor(Math.random() * 1000000);\n\n    const from_account_exists = await Users.findOne({ where: { phone_number: from_account } });\n    const to_account_exists = await Users.findOne({ where: { phone_number: to_account } });\n\n    if (from_account_exists && to_account_exists) {\n        if (from_account === to_account) {\n            return res.status(208).json({ message: \"From account and to account cannot be the same\" });\n        }\n\n        const from_account_role = await Users.findOne({ where: { phone_number: from_account } });\n        const to_account_role = await Users.findOne({ where: { phone_number: to_account } });\n        var p2pFee = jsonConfig.sendMoney.serviceFee;\n        var minAmount = jsonConfig.sendMoney.minAmount;\n\n        if (from_account_role.getDataValue('role') === \"Customer\" && to_account_role.getDataValue('role') === \"Customer\") {\n            var currentBalance = await getBalance(from_account);\n\n            if (currentBalance > 0 && amount + p2pFee <= currentBalance) {\n                if (amount >= minAmount) {\n                    const debitTrnx = {\n                        account: from_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Send Money\",\n                        trnxId: trnxId,\n                        debit: amount + p2pFee,\n                        credit: 0\n                    };\n                    const creditTrnx = {\n                        account: to_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Send Money\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: amount\n                    };\n                    const creditTrnxToSystem = {\n                        account: \"SYSTEM\",\n                        from_account: from_account,\n                        to_account: \"SYSTEM\",\n                        description: \"Sendmoney Service Charge\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: p2pFee\n                    };\n                    await Transactions.create(debitTrnx);\n                    await Transactions.create(creditTrnx);\n                    await Transactions.create(creditTrnxToSystem);\n\n                    return res.status(201).json({\n                        message: \"Send money successful\",\n                        trnxId: trnxId,\n                        fee: p2pFee,\n                        currentBalance: await getBalance(from_account)\n                    });\n                } else {\n                    return res.status(208).json({ message: `Minimum amount is ${minAmount} tk` });\n                }\n            } else {\n                return res.status(208).json({ message: \"Insufficient balance\", currentBalance: await getBalance(from_account) });\n            }\n        } else {\n            return res.status(208).json({ message: \"From/To account should not be an agent account\" });\n        }\n    } else {\n        if (!from_account_exists) {\n            return res.status(404).json({ message: \"From Account does not exist\" });\n        }\n        else if (!to_account_exists) {\n            return res.status(404).json({ message: \"To Account does not exist\" });\n        }\n    }\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/sendMoney.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/payment.controller.js::0",
    "text": "const { Transactions } = require('../../sequelizeModel/Transactions');\nconst { Users } = require('../../sequelizeModel/Users');\nconst { getBalance } = require('../../services/getBalance');\nconst jsonConfig=require('./config.json');\n\nexports.handlePayment = async (req, res, next) => {\n    const { from_account, to_account, amount, discount_code, discount_amount } = req.body;\n    var trnxId = \"TXN\" + Math.floor(Math.random() * 1000000);\n\n    const from_account_exists = await Users.findOne({ where: { phone_number: from_account } });\n    const to_account_exists = await Users.findOne({ where: { phone_number: to_account } });\n\n    if (from_account_exists && to_account_exists) {\n        if (from_account === to_account) {\n            return res.status(208).json({ message: \"From account and to account cannot be the same\" });\n        }\n\n        const from_account_role = await Users.findOne({ where: { phone_number: from_account } });\n        const to_account_role = await Users.findOne({ where: { phone_number: to_account } });\n\n        var feeRate = jsonConfig.payment.serviceFee;\n        var commissionRate = jsonConfig.payment.agentComission;\n        var minAmount = jsonConfig.payment.minAmount;\n        var paymentFee = feeRate * amount;\n        var commission = commissionRate * amount;\n\n        // Apply minimum payment fee\n        if (paymentFee <= 5) {\n            paymentFee = 5;\n        }\n\n        // Apply discount if provided\n        let finalAmount = amount;\n        let discountApplied = false;\n        if (discount_code && discount_amount) {\n            const envDiscountCode = process.env.DISCOUNT_CODE; // assuming discount_code is stored in the env file\n            if (discount_code === envDiscountCode) {\n                finalAmount = amount - (amount * (discount_amount / 100));\n                discountApplied = true;\n            }\n        }\n\n        if ((from_account_role.getDataValue('role') === \"Customer\" || from_account_role.getDataValue('role') === \"Agent\") && to_account_role.getDataValue('role') === \"Merchant\") {\n            var currentBalance = await getBalance(from_account);\n\n            if (currentBalance > 0 && finalAmount + paymentFee <= currentBalance) {\n                if (finalAmount >= minAmount) {\n                    const debitTrnx = {\n                        account: from_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Payment\",\n                        trnxId: trnxId,\n                        debit: finalAmount + paymentFee,\n                        credit: 0\n                    };\n                    const creditTrnx = {\n                        account: to_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Payment\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: finalAmount + commission\n                    };\n                    const creditTrnxToSystem = {\n                        account: \"SYSTEM\",\n                        from_account: from_account,\n                        to_account: \"SYSTEM\",\n                        description: \"Payment Service Charge\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: paymentFee\n                    };\n                    await Transactions.create(debitTrnx);\n                    await Transactions.create(creditTrnx);\n                    await Transactions.create(creditTrnxToSystem);\n\n                    // Build the response object conditionally\n                    let response = {\n                        message: \"Payment successful\",\n                        trnxId: trnxId,\n                        fee: paymentFee,\n                        currentBalance: await getBalance(from_account),\n                    };\n\n                    if (discountApplied) {\n                        response.discountedTotal = finalAmount;\n                        response.discountedAmount = amount - finalAmount;\n                    }\n\n                    return res.status(201).json(response);\n                } else {\n                    return res.status(208).json({ message: `Minimum Payment amount is ${minAmount} tk` });\n                }\n            } else {\n                return res.status(208).json({ message: \"Insufficient balance\", currentBalance: await getBalance(from_account) });\n            }\n        } else {\n            return res.status(208).json({ message: \"From A/C should be customer or agent and To A/C should be merchant type\" });\n        }\n    } else {\n        if(!from_account_exists){\n            return res.status(404).json({ message: \"From Account does not exist\" });\n        }\n        else if(!to_account_exists){\n            return res.status(404).json({ message: \"To Account does not exist\" });\n        }\n    }\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/payment.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/deposit.controller.js::0",
    "text": "const { json } = require('body-parser');\nconst { Transactions } = require('../../sequelizeModel/Transactions');\nconst { Users } = require('../../sequelizeModel/Users');\nconst { getBalance } = require('../../services/getBalance');\nconst jsonConfig=require('./config.json');\n\nexports.handleDeposit = async (req, res, next) => {\n    const { from_account, to_account, amount } = req.body;\n    var trnxId = \"TXN\" + Math.floor(Math.random() * 1000000);\n    var minAmount = jsonConfig.deposit.minAmount;\n    var maxLimit = jsonConfig.deposit.maxLimit;\n    var commissionRate = jsonConfig.deposit.agentComission;\n\n    const from_account_exists = await Users.findOne({ where: { phone_number: from_account } });\n    const to_account_exists = await Users.findOne({ where: { phone_number: to_account } });\n\n    if (from_account_exists && to_account_exists) {\n        if (from_account === to_account) {\n            return res.status(208).json({ message: \"From account and to account cannot be the same\" });\n        }\n\n        const user_role = await Users.findOne({ where: { phone_number: from_account } });\n\n        if (user_role.getDataValue('role') === \"Agent\") {\n            var currentBalance = await getBalance(from_account);\n            var commission = commissionRate * amount;\n\n            if (currentBalance > 0 && amount <= currentBalance) {\n                // Use getBalance to get the correct balance of `to_account`\n                var current_balance_to_account = await getBalance(to_account);\n                console.log(current_balance_to_account);\n\n                // Calculate remaining limit for the deposit\n                var remaining_limit = maxLimit - current_balance_to_account;\n\n                // Check if `to_account` has already reached or exceeded 10,000 TK\n                if (current_balance_to_account >= maxLimit) {\n                    return res.status(208).json({ message: \"Limit exceeded. You cannot deposit any more to this account.\" });\n                }\n\n                // Check if the deposit amount exceeds the remaining limit\n                if (amount > remaining_limit) {\n                    return res.status(208).json({ message: `Limit exceeded. You can deposit a maximum of ${remaining_limit.toFixed(2)} tk to this customer.` });\n                }\n\n                // Deposit process\n                if (amount >= minAmount && amount <= maxLimit) {\n                    const debitTrnx = {\n                        account: from_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Deposit Commission\",\n                        trnxId: trnxId,\n                        debit: amount,\n                        credit: commission\n                    };\n                    const creditTrnx = {\n                        account: to_account,\n                        from_account: from_account,\n                        to_account: to_account,\n                        description: \"Deposit\",\n                        trnxId: trnxId,\n                        debit: 0,\n                        credit: amount\n                    };\n                    await Transactions.create(debitTrnx);\n                    await Transactions.create(creditTrnx);\n\n                    return res.status(201).json({\n                        message: \"Deposit successful\",\n                        trnxId: trnxId,\n                        commission: commission,\n                        currentBalance: await getBalance(from_account)\n                    });\n                } else {\n                    return res.status(208).json({ message: `Minimum deposit amount is ${minAmount} tk and maximum deposit amount is ${maxLimit} tk` });\n                }\n            } else {\n                return res.status(208).json({ message: \"Insufficient balance\", currentBalance: await getBalance(from_account) });\n            }\n        } else {\n            return res.status(208).json({ message: \"Only Agent can deposit money\" });\n        }\n    } else {\n        if (!from_account_exists) {\n            return res.status(404).json({ message: \"From Account does not exist\" });\n        } else if (!to_account_exists) {\n            return res.status(404).json({ message: \"To Account does not exist\" });\n        }\n    }\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/transactions/deposit.controller.js",
      "start_line": 0,
      "type": "file"
    }
  },
  {
    "id": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/default/default.controller.js::0",
    "text": "// Server status check\nexports.serverStatus = (req, res) => {\n    res.status(200).json({ message: \"Server is up\" });\n};",
    "metadata": {
      "file": "/home/salman/Hackathon-Project/AI-Log-Analyzer/dmoney-transaction-api/controllers/default/default.controller.js",
      "start_line": 0,
      "type": "file"
    }
  }
]