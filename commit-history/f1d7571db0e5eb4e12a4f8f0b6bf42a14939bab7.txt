commit f1d7571db0e5eb4e12a4f8f0b6bf42a14939bab7
Author: SalmanRahman <salman.rahman@sharebox.no>
Date:   Fri Jul 25 02:39:38 2025 +0600

    fix: enhance error logging and request handling in app.js

diff --git a/app.js b/app.js
index 06c0b0c..577e3f9 100644
--- a/app.js
+++ b/app.js
@@ -8,39 +8,32 @@ const http = require("http");
 
 const {swaggerUserDocument,swaggerTrnxDocument,} = require("./swagger/swagger.js");
 
-const errorLogStream = fs.createWriteStream("./logs/runtime.log", {
-  flags: "a",
-});
-
-let lastConsoleError = ""; // Buffer to store latest error before request logs
+// -- Log buffer --
+let lastConsoleError = "";
 
+// Override console.error to capture error logs globally
 const originalConsoleError = console.error;
 console.error = function (...args) {
-  const logText =
-    args
-      .map((arg) =>
-        typeof arg === "string" ? arg : JSON.stringify(arg, null, 2)
-      )
-      .join(" ") + "\n";
+  const logText = args
+    .map((arg) => (typeof arg === "string" ? arg : JSON.stringify(arg, null, 2)))
+    .join(" ") + "\n";
 
-  lastConsoleError += logText; // Capture for request-based logging
-
-  originalConsoleError.apply(console, args); // Still show in console
+  lastConsoleError += logText;
+  originalConsoleError.apply(console, args);
 };
 
-//Middleware configurations
+// -- Middleware Config --
 app.use(express.urlencoded({ extended: true }));
 app.use(express.json());
 app.use(cors({ origin: "*" }));
 app.use(morgan("dev"));
 
-//Capture 4xx/5xx request logs BEFORE response is sent
+// Log capture for 4xx and 5xx requests BEFORE response is sent
 app.use((req, res, next) => {
   const originalSend = res.send;
   const originalStatus = res.status;
 
   let statusCode = 200;
-
   res.status = function (code) {
     statusCode = code;
     return originalStatus.apply(this, arguments);
@@ -50,77 +43,69 @@ app.use((req, res, next) => {
     if (statusCode >= 400 && statusCode < 600) {
       const now = new Date().toISOString();
       const logLine = `${req.ip} - - [${now}] "${req.method} ${req.originalUrl} HTTP/${req.httpVersion}" ${statusCode}\n`;
-      const stack = res.locals.errorDetails || lastConsoleError;
+      const stack = res.locals.errorDetails || lastConsoleError || "[No stacktrace]";
       const fullLog = `${logLine}${stack ? `Error Stack:\n${stack}\n` : ""}`;
-
-      // Write locally
-      /*errorLogStream.write(fullLog);
-      // Clear buffer
-      lastConsoleError = "";*/ 
-
-      //Send to MCP server
-      const postReq = http.request(
-        {
-          hostname: "localhost",
-          port: 8000,
-          path: "/logs/stream",
-          method: "POST",
-          headers: {
-            "Content-Type": "text/plain",
-            "Content-Length": Buffer.byteLength(fullLog),
-          },
-        },
-        (res) => {
-          res.on("data", () => {});
+  
+      // Conditionally send to MCP server (only in local/dev)
+      const isLocalEnv = process.env.NODE_ENV !== "production";
+  
+      if (isLocalEnv) {
+        try {
+          const postReq = http.request(
+            {
+              hostname: "localhost",
+              port: 8000,
+              path: "/logs/stream",
+              method: "POST",
+              headers: {
+                "Content-Type": "text/plain",
+                "Content-Length": Buffer.byteLength(fullLog),
+              },
+            },
+            (res) => {
+              res.on("data", () => {});
+            }
+          );
+  
+          postReq.on("error", (err) => {
+            console.warn("⚠️ MCP log send failed:", err.message);
+          });
+  
+          postReq.write(fullLog);
+          postReq.end();
+        } catch (e) {
+          console.warn("⚠️ MCP logging exception:", e.message);
         }
-      );
-
-      postReq.on("error", (err) => {
-        console.warn("⚠️ Failed to send log to MCP:", err.message);
-      });
-
-      postReq.write(fullLog);
-      postReq.end();
+      }
     }
-
+  
     return originalSend.apply(this, arguments);
   };
+  
 
   next();
 });
 
-//Also pipe structured request logs via morgan (optional)
+// Optional: suppress morgan from writing duplicate logs to file
 app.use(
   morgan("combined", {
     stream: {
       write: (message) => {
-        // Only log to runtime.log if it’s 4xx or 5xx
-        const statusCodeMatch = message.match(/" (\d{3}) /);
-        if (statusCodeMatch) {
-          const status = parseInt(statusCodeMatch[1]);
-          if (status >= 400 && status < 600) {
-            // Suppressed because we're already logging manually above
-            return;
-          }
+        const statusMatch = message.match(/" (\d{3}) /);
+        if (statusMatch) {
+          const code = parseInt(statusMatch[1]);
+          if (code >= 400 && code < 600) return;
         }
       },
     },
   })
 );
 
-//Swagger
-app.use(
-  "/api-docs/user",
-  swaggerUi.serveFiles(swaggerUserDocument),
-  swaggerUi.setup(swaggerUserDocument)
-);
-app.use(
-  "/api-docs/transaction",
-  swaggerUi.serveFiles(swaggerTrnxDocument),
-  swaggerUi.setup(swaggerTrnxDocument)
-);
+// Swagger Docs
+app.use("/api-docs/user", swaggerUi.serveFiles(swaggerUserDocument), swaggerUi.setup(swaggerUserDocument));
+app.use("/api-docs/transaction", swaggerUi.serveFiles(swaggerTrnxDocument), swaggerUi.setup(swaggerTrnxDocument));
 
-//Routes
+// Routes
 const userRoutes = require("./routes/user.route.js");
 const transactionRoutes = require("./routes/transaction.route.js");
 const defaultRoutes = require("./routes/default.route.js");
@@ -129,19 +114,25 @@ app.use("/", userRoutes);
 app.use("/", transactionRoutes);
 app.use("/", defaultRoutes);
 
-//404 Not Found
+// 404 Not Found Handler
 app.use((req, res, next) => {
   const err = new Error(`${req.method} ${req.url} Not Found`);
   err.status = 404;
   next(err);
 });
 
-//Global Error Handler
+// Global Error Handler
 app.use((err, req, res, next) => {
   const errorDetails = err.stack || err.message || "Unknown Error";
   res.locals.errorDetails = errorDetails;
-  console.error(errorDetails); // Already logs to file
+  console.error(errorDetails); // Captured to buffer
   res.status(err.status || 500).json({ error: { message: err.message } });
 });
 
+// Clear error buffer after each request (safe reset)
+app.use((req, res, next) => {
+  lastConsoleError = "";
+  next();
+});
+
 module.exports = app;
