commit 406a905cd20f1c333f4904dfb32e3336d8a095f9
Author: SalmanRahman <salman.rahman@sharebox.no>
Date:   Fri Jul 25 13:24:23 2025 +0600

    fix: update response status codes and enhance error logging in transaction controllers

diff --git a/controllers/transactions/deposit.controller.js b/controllers/transactions/deposit.controller.js
index aaf2db6..2370873 100644
--- a/controllers/transactions/deposit.controller.js
+++ b/controllers/transactions/deposit.controller.js
@@ -16,7 +16,7 @@ exports.handleDeposit = async (req, res, next) => {
 
     if (from_account_exists && to_account_exists) {
         if (from_account === to_account) {
-            return res.status(208).json({ message: "From account and to account cannot be the same" });
+            return res.status(400).json({ message: "From account and to account cannot be the same" });
         }
 
         const user_role = await Users.findOne({ where: { phone_number: from_account } });
@@ -73,18 +73,24 @@ exports.handleDeposit = async (req, res, next) => {
                         currentBalance: await getBalance(from_account)
                     });
                 } else {
-                    return res.status(208).json({ message: `Minimum deposit amount is ${minAmount} tk and maximum deposit amount is ${maxLimit} tk` });
+                    const errorResponse = { message: `Minimum deposit amount is ${minAmount} tk and maximum deposit amount is ${maxLimit} tk` };
+                    console.error("Invalid deposit amount - Request:", req.body, "Response:", errorResponse);
+                    return res.status(400).json({ message: `Minimum deposit amount is ${minAmount} tk and maximum deposit amount is ${maxLimit} tk` });
                 }
             } else {
+                console.log("Insufficient balance");
                 return res.status(208).json({ message: "Insufficient balance", currentBalance: await getBalance(from_account) });
             }
         } else {
+            console.error("Only Agent can deposit money");
             return res.status(208).json({ message: "Only Agent can deposit money" });
         }
     } else {
         if (!from_account_exists) {
+            console.error("From Account does not exist");
             return res.status(404).json({ message: "From Account does not exist" });
         } else if (!to_account_exists) {
+            console.error("To Account does not exist");
             return res.status(404).json({ message: "To Account does not exist" });
         }
     }
diff --git a/controllers/transactions/payment.controller.js b/controllers/transactions/payment.controller.js
index 4067b78..cbf8c82 100644
--- a/controllers/transactions/payment.controller.js
+++ b/controllers/transactions/payment.controller.js
@@ -12,7 +12,8 @@ exports.handlePayment = async (req, res, next) => {
 
     if (from_account_exists && to_account_exists) {
         if (from_account === to_account) {
-            return res.status(208).json({ message: "From account and to account cannot be the same" });
+            console.error(req.body, "From account and to account cannot be the same");
+            return res.status(400).json({ message: "From account and to account cannot be the same" });
         }
 
         const from_account_role = await Users.findOne({ where: { phone_number: from_account } });
@@ -91,20 +92,25 @@ exports.handlePayment = async (req, res, next) => {
 
                     return res.status(201).json(response);
                 } else {
-                    return res.status(208).json({ message: `Minimum Payment amount is ${minAmount} tk` });
+                    console.error(`Minimum Payment amount is ${minAmount} tk`);
+                    return res.status(400).json({ message: `Minimum Payment amount is ${minAmount} tk` });
                 }
             } else {
+                console.log("Insufficient balance");
                 return res.status(208).json({ message: "Insufficient balance", currentBalance: await getBalance(from_account) });
             }
         } else {
-            return res.status(208).json({ message: "From A/C should be customer or agent and To A/C should be merchant type" });
+            console.error(req.body, "From A/C should be customer or agent and To A/C should be merchant type");
+            return res.status(400).json({ message: "From A/C should be customer or agent and To A/C should be merchant type" });
         }
     } else {
         if(!from_account_exists){
-            return res.status(404).json({ message: "From Account does not exist" });
+            console.error(req.body, "From Account does not exist");
+            return res.status(400).json({ message: "From Account does not exist" });
         }
         else if(!to_account_exists){
-            return res.status(404).json({ message: "To Account does not exist" });
+            console.error(req.body, "To Account does not exist");
+            return res.status(400).json({ message: "To Account does not exist" });
         }
     }
 };
diff --git a/controllers/transactions/sendMoney.controller.js b/controllers/transactions/sendMoney.controller.js
index 1cba3f4..345b741 100644
--- a/controllers/transactions/sendMoney.controller.js
+++ b/controllers/transactions/sendMoney.controller.js
@@ -12,7 +12,8 @@ exports.handleSendMoney = async (req, res, next) => {
 
     if (from_account_exists && to_account_exists) {
         if (from_account === to_account) {
-            return res.status(208).json({ message: "From account and to account cannot be the same" });
+            console.error("From account and to account cannot be the same");
+            return res.status(400).json({ message: "From account and to account cannot be the same" });
         }
 
         const from_account_role = await Users.findOne({ where: { phone_number: from_account } });
@@ -63,7 +64,8 @@ exports.handleSendMoney = async (req, res, next) => {
                         currentBalance: await getBalance(from_account)
                     });
                 } else {
-                    return res.status(208).json({ message: `Minimum amount is ${minAmount} tk` });
+                    console.error(req.body, `Minimum amount is ${minAmount} tk`);
+                    return res.status(400).json({ message: `Minimum amount is ${minAmount} tk` });
                 }
             } else {
                 return res.status(208).json({ message: "Insufficient balance", currentBalance: await getBalance(from_account) });
@@ -73,9 +75,11 @@ exports.handleSendMoney = async (req, res, next) => {
         }
     } else {
         if (!from_account_exists) {
+            console.error(req.body, "From Account does not exist");
             return res.status(404).json({ message: "From Account does not exist" });
         }
         else if (!to_account_exists) {
+            console.error(req.body, "To Account does not exist");
             return res.status(404).json({ message: "To Account does not exist" });
         }
     }
diff --git a/controllers/transactions/transactionDetails.controller.js b/controllers/transactions/transactionDetails.controller.js
index 0bd53c2..6f16592 100644
--- a/controllers/transactions/transactionDetails.controller.js
+++ b/controllers/transactions/transactionDetails.controller.js
@@ -32,7 +32,7 @@ exports.listTransactions = async (req, res, next) => {
             res.status(404).json({ message: "No transactions found" });
         }
     } catch (e) {
-        console.log(e);
+        console.error(e);
         res.status(500).json({ message: "Error fetching transactions" });
     }
 };
diff --git a/controllers/transactions/withdraw.controller.js b/controllers/transactions/withdraw.controller.js
index 0ce3b38..e189dbd 100644
--- a/controllers/transactions/withdraw.controller.js
+++ b/controllers/transactions/withdraw.controller.js
@@ -13,7 +13,7 @@ exports.handleWithdraw = async (req, res, next) => {
 
     if (from_account_exists && to_account_exists) {
         if (from_account === to_account) {
-            return res.status(208).json({ message: "From account and to account cannot be the same" });
+            return res.status(400).json({ message: "From account and to account cannot be the same" });
         }
 
         const from_account_role = await Users.findOne({ where: { phone_number: from_account } });
@@ -74,7 +74,8 @@ exports.handleWithdraw = async (req, res, next) => {
                         currentBalance: await getBalance(from_account),
                     });
                 } else {
-                    return res.status(208).json({ 
+                    console.error(req.body, `Minimum withdraw amount is ${minAmount} tk`);
+                    return res.status(400).json({ 
                         message: `Minimum withdraw amount is ${minAmount} tk` ,
                         currentBalance: await getBalance(from_account)
                     });
@@ -83,14 +84,16 @@ exports.handleWithdraw = async (req, res, next) => {
                 return res.status(208).json({ message: "Insufficient balance", currentBalance: await getBalance(from_account) });
             }
         } else {
-            return res.status(208).json({ message: "Customer cannot withdraw money from another customer" });
+            return res.status(400).json({ message: "Customer cannot withdraw money from another customer" });
         }
     } else {
         if(!from_account_exists){
-            return res.status(404).json({ message: "From Account does not exist" });
+            console.error(req.body, "From Account does not exist");
+            return res.status(400).json({ message: "From Account does not exist" });
         }
         else if(!to_account_exists){
-            return res.status(404).json({ message: "To Account does not exist" });
+            console.error(req.body, "To Account does not exist");
+            return res.status(400).json({ message: "To Account does not exist" });
         }
         
     }
